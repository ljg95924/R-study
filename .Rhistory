"ellipse")
featurePlot(
Data_complete[,
sapply(names(Data_complet),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
#데이터 시각화(featureplot사용)
Data_complete<-x$Fold1$train[complete.cases(x$Fold1$train),]
featurePlot(
Data_complete[,
sapply(names(Data_complet),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
#데이터 시각화(featureplot사용)
Data_complete<-x$Fold1$train[complete.cases(x$Fold1$train),]
#데이터 시각화(featureplot사용)
Data_complete<-x$Fold1$train[complete.cases(x$Fold1$train),]
featurePlot(
Data_complete[,
sapply(names(Data_complet),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
featurePlot(
Data_complete[,
sapply(names(Data_complete),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
mosaicplot(주야~요일+사고유형_대분류,data=x$Fold1$train,color=TRUE,main='요일 and 사고유형')
levels(Data$사고유형_대분류)
table(Data$사고유형_대분류)
library(dplyr)
table(Data$사고유형_대분류)
#데이터 불러오기
Data<-read.csv('전국_사망교통사고_2017.csv')
Data<-Data%>%select(-'당사자종별_1당_대분류',-'당사자종별_2당_대분류',-'사고유형')
Data<-Data%>%select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형)
#데이터 확인
str(Data)
#데이터 타입 형식 변환
Data$발생지시군구<-as.character(Data$발생지시군구)
#데이터 불러오기
csv_Data<-read.csv('전국_사망교통사고_2017.csv')
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
#데이터 확인
str(Data)
Data<-
#데이터 타입 형식 변환
Data$발생지시군구<-as.character(Data$발생지시군구)
table(Data$사고유형_대분류)
table(Data$사고유형_대분류)
#데이터 확인
str(Data)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
#데이터 확인
str(Data)
table(Data$사고유형_대분류)
Data<-Data%>%
filter(사고유형_대분류=="철길건널목")%>%
#데이터 타입 형식 변환
Data$발생지시군구<-as.character(Data$발생지시군구)
Data<-Data%>%
filter(사고유형_대분류==-"철길건널목")
Data<-Data%>%
filter(사고유형_대분류=="-철길건널목")
Data<-Data%>%
filter(사고유형_대분류=="-철길건널목")
#데이터 확인
str(Data)
Data
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
#데이터 확인
str(Data)
Data<-Data%>%
filter(-사고유형_대분류=="철길건널목")
#데이터 확인
str(Data)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
boxplot(Data$사고유형_대분류)
boxplot(Data$사고유형_대분류)
#데이터 확인
str(Data)
#데이터 타입 형식 변환
Data$발생지시군구<-as.character(Data$발생지시군구)
Data<-Data%>%
filter(사고유형_대분류=="철길건널목")
#데이터 확인
str(Data)
View(Data)
View(Data)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
Data<-Data%>%
filter(사고유형_대분류==-"철길건널목")
ifelse(Data$사고유형_대분류=="철길건널목",NA,Data$사고유형_대분류)
table(Data$사고유형_대분류)
levels(Data$사고유형_대분류)
Data<-ifelse(Data$사고유형_대분류=="철길건널목",NA,Data$사고유형_대분류)
table(Data$사고유형_대분류)
table(Data$사고유형_대분류)
#데이터 확인
str(Data)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
Data$사고유형_대분류<-ifelse(Data$사고유형_대분류=="철길건널목",NA,Data$사고유형_대분류)
#데이터 확인
str(Data)
table(Data$사고유형_대분류)
levels(Data$사고유형_대분류)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
#데이터 확인
str(Data)
#데이터 불러오기
csv_Data<-read.csv('전국_사망교통사고_2017.csv')
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
table(Data$사고유형_대분류)
#데이터 확인
str(Data)
#결측치 확인
table(is.na(Data))
test_idx<-createDataPartition(Data$주야,p=0.3)$Resample1
test_Data<-Data[test_idx,]
train_Data<-Data[-test_idx,]
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(137)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
x<-create_ten_fold_cv()
str(x)
summary(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=x$Fold1$train,method='reverse')
#데이터 시각화(featureplot사용)
Data_complete<-x$Fold1$train[complete.cases(x$Fold1$train),]
featurePlot(
Data_complete[,
sapply(names(Data_complete),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
mosaicplot(주야~요일+사고유형_대분류,data=x$Fold1$train,color=TRUE,main='요일 and 사고유형')
xtabs(~요일+사고유형_대분류,data=x$Fold1$train)
xtabs(주야=="야간"~요일+사고유형_대분류,data=x$Fold1$train)
xtabs(주야=="주간"~요일+사고유형_대분류,data=x$Fold1$train)
xtabs(주야=="야간"~요일+사고유형_대분류,data=x$Fold1$train)/xtabs(~요일+사고유형_대분류,data=x$Fold1$train)
xtabs(주야=="주간"~요일+사고유형_대분류,data=x$Fold1$train)/xtabs(~요일+사고유형_대분류,data=x$Fold1$train)
library(rpart)
m<-rpart( 주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=x$Fold1$train)
View(m)
View(m)
m<-rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data)
View(m)
View(m)
p<-predict(m,newdata=train_Data,type='class')
head(p)
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds)%do% {
model_rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$survived,predicted=predicted))
}
#rpart 모델
library(rpart)
rpart_result<-foreach(f=folds)%do% {
model_rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$survived,predicted=predicted))
}
rpart_result<-foreach(f=folds) %do% {
model_rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$survived,predicted=predicted))
}
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$survived,predicted=predicted))
}
library(foreach)
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$survived,predicted=predicted))
}
head(rpart_result)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
return(accuracy)
}
evaluation(rpart_result)
evaluation<-function(1st){
accuracy<-sapply(1st,function(one_result){
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
return(accuracy)
}
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
head(rpart_result)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
return(accuracy)
}
evaluation(rpart_result)
plot(rpart_result)
plot(evaluation())
plot(evaluation
plot(evaluation)
plot(evaluation)
plot(m,compress = T,margin=.2)
text(m,cex=1.5)
prp()
#ctree 모델
library(party)
#ctree 모델
install.packages('party')
#ctree 모델
install.packages('party')
library(party)
plot(p)
text([])
text(p)
#ctree 모델
install.packages('party')
#ctree 모델
install.packages('party')
#ctree 모델
install.packages('party')
#ctree 모델
install.packages('party')
#ctree 모델
install.packages("party")
#ctree 모델
install.packages("party")
.libPaths()
install.packages(c("rpart", "survival"))
install.packages(c("rpart", "survival"))
install.packages(c("rpart", "survival"))
install.packages(c("rpart", "survival"))
install.packages(c("rpart", "survival"))
install.packages(c("rpart", "survival"))
#ctree 모델
install.packages("party")
#ctree 모델
library(party)
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류_도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$survived,predicted=predicted))
}
rm(list=ls())
#데이터 불러오기
csv_Data<-read.csv('전국_사망교통사고_2017.csv')
#불필요한 데이터 삭제
library(dplyr)
Data<-csv_Data%>%
select(-당사자종별_1당_대분류,-당사자종별_2당_대분류,-사고유형) #중복 데이터 삭제
#데이터 타입 형식 변환
Data$발생지시군구<-as.character(Data$발생지시군구)
library(caret)
set.seed(137) #항상 같은데이터로 분리하기 위해서
test_idx<-createDataPartition(Data$주야,p=0.3)$Resample1
test_Data<-Data[test_idx,]
train_Data<-Data[-test_idx,]
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(137)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
x<-create_ten_fold_cv()
str(x)
head(x$Fold1$train)
#데이터 탐색
library(Hmisc)
summary(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=x$Fold1$train,method='reverse')
#데이터 시각화(featureplot사용)
Data_complete<-x$Fold1$train[complete.cases(x$Fold1$train),]
featurePlot(
Data_complete[,
sapply(names(Data_complete),
function(n){is.numeric(Data_complete[,n])})],
Data_complete[,c('주야')],
"ellipse")
mosaicplot(주야~요일+사고유형_대분류,data=x$Fold1$train,color=TRUE,main='요일 and 사고유형')
#rpart 모델
library(rpart)
m<-rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data)
p<-predict(m,newdata=train_Data,type='class')
head(p)
library(foreach)
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
return(accuracy)
}
evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단(70.6%)
plot(evaluation)
#ctree 모델
library(party)
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류_도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$survived,predicted=predicted))
}
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$survived,predicted=predicted))
}
ctree_accuracy<-evaluation(ctree_result)
ctree_accuracy<-evaluation(ctree_result)
head(rpart_result)
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy)))
return(accuracy)
}
evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단(70.6%)
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$survived,predicted=predicted))
}
ctree_accuracy<-evaluation(ctree_result)
View(ctree_result)
View(ctree_result)
(ctree_accuracy<-evaluation(ctree_result))
(ctree_accuracy<-evaluation(ctree_result))
evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단(70.6%)
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$주야,predicted=predicted))
}
(ctree_accuracy<-evaluation(ctree_result))
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단(70.6%)
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
lines(density(ctree_accuracy),col='red',lty='dashed')
plot(p)
plot(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data))
plot(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data),method='class')
plot(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data,method='class'))
plot(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data,method='class'))
plot(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data,method='class'))
text(rpart(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=train_Data,method='class'))
(ctree_accuracy<-evaluation(ctree_result))
ml<-lm(주야~요일,data=Data)
View(ml)
ml
#데이터 확인
str(Data)
#회귀계수
coef(ml)
#fitted value(적합된 값)
fitted(ml)
#fitted value(적합된 값)
fitted(ml)[1:10]
confint(ml)
summary(ml)
summary(ml)
plot(ml)
summary(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=x$Fold1$train,method='reverse')
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
lines(density(ctree_accuracy),col='red',lty='dashed')
summary(cars)
plot(pressure)
csv_Data<-read.csv('전국_사망교통사고_2017.csv')
#데이터 확인
str(Data)
Data$발생년월일시[5,6]%>%
#결측치 확인
table(is.na(Data))
Data$발생년월일시[5,6]
Data$발생년월일시[5,6]
Data$발생년월일시[]
Data$발생년월일시
#결측치 확인
table(is.na(Data))
Data$발생년월일시
#결측치 확인
table(is.na(Data))
Data$발생년월일시[5,6]
Data[1,2]
Data[1,3]
Data[1,1]
Data[1,2]
Data[1,2,3]
Data[1,2,3,4]
Data[1,2,4]
Data[1,2,10]
Data[1,2,600]
Data[1,2,1000]
Data[1,2,]
Data[1,]
Data[,2,3]
Data[,2]
substr(Data[,2],7,8)
substr(Data[,2],9,10)
substr(Data[,2],9,10)+Data$발생분
#결측치 확인
table(is.na(Data))
substr(Data[,2],9,10)+Data$발생분
#결측치 확인
table(is.na(Data))
#시간 함수 만들기
Data$time<-substr(Data[,2],9,10)
#데이터 확인
str(Data)
Data$time<-as.integer(Data$time)
#데이터 확인
str(Data)
lm(formula = 사고유형_대분류~time,data=Data)
ml<-lm(formula = 사고유형_대분류~time,data=Data)
fitted(ml)[1:10]
Data2<-Data
library(caret)
summary(주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=x$Fold1$train,method='reverse')
head(rpart_result)
(rpart_result)
head(str(x))
(str(x))
head(str(x),n=2)
head(str(x),n=1)
head(str(x),1)
#결측치 확인
table(is.""(Data))
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단(70.6%)
