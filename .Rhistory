rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(30)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(37)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(38)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(39)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(35)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(36)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(34)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(33)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(32)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(31)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(115)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(116)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(114)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(113)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(112)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(112)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(117)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
folds<-create_ten_fold_cv()
rpart_result<-foreach(f=folds) %do% {
model_rpart<-rpart(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태, data=f$train)
predicted<-predict(model_rpart, newdata=f$validation,
type="class")
return(list(actual=f$validation$주야,predicted=predicted))
}
#head(rpart_result)
#Accuracy 평가 (Accuracy 계산결과 rpart 모델성능 판단)
evaluation<-function(lst){
accuracy<-sapply(lst,function(one_result){ #벡터로 묶음
return(sum(one_result$predicted==one_result$actual)
/NROW(one_result$actual))
})
print(sprintf("MEAN +/- SD: %.3f +/- %.3f",
mean(accuracy),sd(accuracy))) #평균, 표준편차
return(accuracy)
}
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(118)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
#교차 검증 준비
create_ten_fold_cv<-function(){
set.seed(117)
lapply(createFolds(train_Data,k=10),function(idx){
return(list(train=train_Data[-idx,],
validation=train_Data[idx,]))
})
}
ctree_result<-foreach(f=folds)%do% {
model_ctree<-ctree(
주야~요일+발생지시도+사고유형_대분류+사고유형_중분류+도로형태,data=f$train)
predicted<-predict(model_ctree,newdata=f$validation,
type='response')
return(list(actual=f$validation$주야,predicted=predicted))
}
(ctree_accuracy<-evaluation(ctree_result))
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
lines(density(ctree_accuracy),col='red',lty='dashed')
rpart_accuracy<-evaluation(rpart_result) #Accuracy 계산결과 rpart 모델성능 판단
#정확도 분포
plot(density(rpart_accuracy),main='rpart VS ctree')
csv_Data<-read.csv('data//교통사고정보//2017_교통사고정보.csv')
